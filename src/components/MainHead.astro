---
import "../styles/global.css";
import { SEO } from "astro-seo";

interface Props {
  title?: string | undefined;
  OGTitle?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Daniel Mamuza",
  OGTitle = "Daniel Mamuza",
  description = "Daniel Mamuza Portfolio",
} = Astro.props;
---

<meta charset="UTF-8" />

<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<SEO
  title={title}
  description={description}
  openGraph={{
    basic: {
      title: OGTitle,
      type: "website",
      image: "https://danielmamuza.com/assets/old/img/waves.png",
    },
  }}
  extend={{
    // extending the default link tags
    link: [
      { rel: "icon", href: "/assets/favicon.ico" },
      { rel: "sitemap", href: "/sitemap-index.xml" },
    ],
    // extending the default meta tags
    meta: [
      {
        name: "twitter:image",
        content: "https://danielmamuza.com/assets/old/img/waves.png",
      },
      { name: "twitter:title", content: title },
      { name: "twitter:description", content: description },
    ],
  }}
/>

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  rel="stylesheet"
/>
<link
  href="https://fonts.googleapis.com/css2?family=Noto+Serif:ital,wght@0,100..900;1,100..900&display=swap"
  rel="stylesheet"
/>
<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

  if (typeof localStorage !== "undefined") {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("theme-dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
