---
const api = import.meta.env.STEAM_API_KEY;
const steamId = "76561197989108352";
const apiUrl = `http://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v0001/?key=${api}&steamid=${steamId}&format=json&count=4`;

type Game = {
  appid: number;
  name: string;
  playtime_2weeks: number;
  playtime_forever: number;
  img_icon_url: string;
  img_logo_url: string; 
};

const response = await fetch(apiUrl);
const data = await response.json();
const games: Game[] = data.response.games;

---

<div class="games">
  {
    games.map((game) => (
      <div class="game">
        <img
          width="460px"
          height="215px"
          src={`https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/${game.appid}/header.jpg`}
        />
        <div>
          <h3>{game.name}</h3>
          <p style="color: var(--accent-dark)">Playtime past two weeks:</p>
          <p style="color: var(--accent-dark)">
            {(game.playtime_2weeks / 60).toFixed(2)} hours
          </p>
        </div>
      </div>
    ))
  }
</div>

<script>
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("show");
      }
    });
  });

  const gameElements = document.querySelectorAll(".game");
  gameElements.forEach((el) => observer.observe(el));
</script>

<style>
  .games {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .game {
    border: 1px solid var(--gray-800);
    border-radius: 0.75rem;
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .game:hover {
    box-shadow: var(--shadow-lg);
  }

  img {
    object-fit: cover;
    border-radius: 0.5rem;
    width: auto;
    height: 60%;
  }

  h3 {
    font-size: var(--text-2xl);
  }

  .game {
    opacity: 0;
    filter: blur(5px);
    transform: translateY(100%);
    transition:
      opacity 0.5s,
      filter 0.7s,
      transform 0.5s cubic-bezier(0, 0.96, 0.33, 0.83);
  }

  .show {
    opacity: 1;
    filter: blur(0);
    transform: translateY(0px);
  }

  .game:nth-child(1) {
    transition-delay: 0s;
  }

  .game:nth-child(2) {
    transition-delay: 0.2s;
  }

  .game:nth-child(3) {
    transition-delay: 0.4s;
  }

  .game:nth-child(4) {
    transition-delay: 0.6s;
  }

  @media (min-width: 60em) {
    .game {
      flex-direction: row;
    }

    img {
      width: 80%;
      height: auto;
    }
  }

  @media (prefers-reduced-motion) {
    .game {
      transition: none;
    }
  }
</style>
