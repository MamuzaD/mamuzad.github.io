---
interface Props {
  height: string
  width: string
  small?: boolean
}

const { height, width, small } = Astro.props
---

<profile-pic>
  {
    small ? (
      <button
        class="profile-picture-small glow-on-hover"
        aria-label="Change profile picture"
      >
        <img decoding="async" alt="" loading="eager" class="bg-muted-foreground/50 animate-fadeIn"/>
      </button>
    ) : (
      <button class="profile-picture" aria-label="Change profile picture">
        <img {height} {width} decoding="async" alt="" loading="eager" />
      </button>
    )
  }
</profile-pic>

<script>
  import { profiles } from "@/content/profiles"
  import { currentProfile, cycleProfile } from "@/lib/store"

  class ProfilePic extends HTMLElement {
    constructor() {
      super()

      this.renderProfilePicture()

      currentProfile.subscribe(() => this.renderProfilePicture())

      const button = this.querySelector("button")

      if (button) {
        button.addEventListener("click", (event) => {
          event.preventDefault()

          cycleProfile()
          const currentProfileName = currentProfile.get()
          // const profile = profiles.find((p) => p.name === currentProfileName)!;
          // var sound = new Audio(profile.audio);
          // console.log(profile.audio);
          // sound.play();
        })
      }
    }

    renderProfilePicture() {
      const currentProfileName = currentProfile.get()
      const profile = profiles.find((p) => p.name === currentProfileName)

      const img = this.querySelector("img")
      if (img && profile) {
        img.src = profile.path
        currentProfile.set(profile.name)
      }
    }
  }

  customElements.define("profile-pic", ProfilePic)
</script>

<style>
  .glow-on-hover {
    cursor: pointer;
    position: relative;
    z-index: 0;
  }

  .glow-on-hover:before {
    content: "";
    background: linear-gradient(
      45deg,
      #ff0000,
      #ff7300,
      #fffb00,
      #48ff00,
      #00ffd5,
      #002bff,
      #7a00ff,
      #ff00c8,
      #ff0000
    );
    position: absolute;
    top: -2px;
    left: -2px;
    background-size: 400%;
    z-index: -1;
    filter: blur(2px);
    width: calc(100% + 5px);
    height: calc(100% + 5px);
    animation: glowing 20s linear infinite;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    border-radius: 100%;
  }

  .glow-on-hover:active:after {
    background: transparent;
  }

  .glow-on-hover:hover:before {
    opacity: 1;
  }

  .glow-on-hover:after {
    z-index: -1;
    position: absolute;
    width: 80%;
    height: 80%;
    border-radius: 100%;
  }

  @keyframes glowing {
    0% {
      background-position: 0 0;
    }
    50% {
      background-position: 400% 0;
    }
    100% {
      background-position: 0 0;
    }
  }

  profile-pic {
    line-height: 0;
    padding: 0;
    border-radius: 1.5rem;
    animation: blur-in 0.7s linear;
  }

  @media (prefers-reduced-motion) {
    profile-pic {
      animation: none;
    }
  }

  profile-pic:hover {
    box-shadow: var(--shadow-md);
  }

  button.profile-picture:hover,
  button.profile-picture-small:hover {
    cursor: url("/help.svg"), auto;
  }

  .profile-picture {
    position: relative;
    z-index: 99;
  }

  .profile-picture img {
    object-fit: cover;
    border-radius: 1.5rem;
    aspect-ratio: 5/6;
  }

  .profile-picture-small {
    width: 3rem;
    height: 3rem;
    border-radius: 100%;
  }

  .profile-picture-small img {
    width: 3rem;
    height: 3rem;
    border-radius: 100%;
    object-fit: cover;
  }

  @media (min-width: 50em) {
    .profile-picture img {
      aspect-ratio: 3/4;
    }
  }
</style>
