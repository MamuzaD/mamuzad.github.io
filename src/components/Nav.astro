---
import Icon from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";
import { ScrollProgress } from "./scroll-progress";
import type { iconPaths } from "./IconPaths";
import ProfilePic from "./ProfilePic.astro";
import RichPresence from "./RichPresence.astro";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "/" },
  { label: "Projects", href: "/projects/" },
  { label: "About", href: "/about/" },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: {
  label: string;
  href: string;
  icon: keyof typeof iconPaths;
}[] = [
  {
    label: "LinkedIn",
    href: "https://www.linkedin.com/in/daniel-mamuza/",
    icon: "linkedin-logo",
  },
  {
    label: "GitHub",
    href: "https://github.com/nostalgicdani",
    icon: "github-logo",
  },
  {
    label: "Resume",
    href: "/resume/Daniel_Mamuza_Resume.pdf",
    icon: "resume",
  },
];
---

<nav transition:persist>
  <div class="menu-header">
    <div class="name">
      <ProfilePic height="300px" width="300px" small />
      <a href="/" class="nav-title"> Daniel Mamuza </a>
      <!-- <RichPresence /> -->
    </div>
    <menu-button>
      <template>
        <button class="menu-button" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <Icon icon="list" />
        </button>
      </template>
    </menu-button>
  </div>
  <noscript>
    <ul class="nav-items">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </noscript>
  <noscript>
    <div class="menu-footer">
      <div class="socials">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>
    </div>
  </noscript>
  <div id="menu-content" hidden>
    <ul class="nav-items">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="menu-footer">
      <div class="socials">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>

      <div class="theme-toggle">
        <ThemeToggle />
      </div>
    </div>
  </div>
  <ScrollProgress client:idle />
</nav>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const navLoad = sessionStorage.getItem("navLoad");
    const nav = document.querySelector("nav")!;

    if (!navLoad) {
      nav.classList.add("load-in");

      sessionStorage.setItem("navLoad", "true");
    }
    nav.style.opacity = "100";
  });

  window.addEventListener("scroll", () => {
    const nav = document.querySelector("nav")!;
    const scrollPosition = window.scrollY;
    const triggerPosition = document.documentElement.scrollHeight * 0.08;

    if (scrollPosition > triggerPosition) {
      nav.classList.add("nav-blurred");
    } else {
      nav.classList.remove("nav-blurred");
    }
  });

  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;
      // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
      menu.classList.add("menu-content");

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        const header = document.querySelector(".menu-header")!;
        if (expand) {
          menu.classList.remove("nav-closing");
          menu.hidden = false;
          header.classList.add("nav-open");
        } else {
          menu.classList.add("nav-closing");
          setTimeout(function () {
            menu.hidden = true;
          }, 500);
          header.classList.remove("nav-open");
        }
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => setExpanded(menu.hidden));

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia("(min-width: 50em)");
      handleViewports(mediaQueries);
      mediaQueries.addEventListener("change", handleViewports);
    }
  }
  customElements.define("menu-button", MenuButton);
</script>

<style>
  nav {
    z-index: 9999;
    position: fixed;
    width: 100%;
    font-family: var(--font-brand);
    font-weight: 500;
    margin-bottom: 3.5rem;
    transition: backdrop-filter 0.9s ease-in-out;
  }

  .load-in {
    animation: fade-down 0.6s ease-out;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 1.5rem;
    z-index: 2;
  }

  .nav-title {
    display: flex;
    gap: 0.5rem;
    font-family: var(--font-body);
    align-items: center;
    line-height: 1.1;
    color: var(--gray-0);
    text-decoration: none;
  }

  .menu-button {
    position: relative;
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0.5rem;
    font-size: 1.5rem;
    color: var(--gray-300);
    background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
    box-shadow: var(--shadow-md);
  }

  .menu-button[aria-expanded="true"] {
    color: var(--gray-0);
    background: linear-gradient(180deg, var(--gray-600), transparent),
      radial-gradient(var(--gray-900), var(--gray-800) 150%);
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button::before {
    position: absolute;
    inset: -1px;
    content: "";
    background: var(--gradient-stroke);
    border-radius: 999rem;
    z-index: -1;
  }

  .menu-content {
    position: absolute;
    left: 0;
    right: 0;
  }

  @media (max-width: 50em) {
    nav {
      z-index: 100;
    }
    .nav-open {
      background-color: var(--gray-999);
    }
    .menu-header {
      position: relative;
      z-index: 999;
      transition: background-color 0.1s linear 0.2s;
    }

    .menu-content {
      z-index: 1; /* to be below nav when sliding in */
      animation: slide-down 0.5s ease-in;
    }
    .nav-closing {
      animation: nav-slide-up 0.5s ease;
    }
  }

  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: var(--text-md);
    line-height: 1.2;
    list-style: none;
    padding: 2rem;
    background-color: var(--gray-999);
    border-bottom: 1px solid var(--gray-800);
  }

  .link {
    display: inline-block;
    color: var(--gray-300);
    text-decoration: none;
  }

  .link.active {
    color: var(--gray-0);
  }

  .menu-footer {
    --icon-size: var(--text-xl);
    --icon-padding: 0.5rem;

    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem 1.5rem 1.5rem;
    background-color: var(--gray-999);
    border-radius: 0 0 0.75rem 0.75rem;
    box-shadow: var(--shadow-lg);
  }

  .socials {
    display: flex;
    flex-wrap: wrap;
    gap: 0.625rem;
    font-size: var(--icon-size);
  }

  .social {
    display: flex;
    padding: var(--icon-padding);
    text-decoration: none;
    color: var(--accent-dark);
    transition: color var(--theme-transition) transform 0.5s;
  }

  .social:hover,
  .social:focus {
    transform: scale(1.2);
    color: var(--accent-text-over);
  }

  .theme-toggle {
    display: flex;
    align-items: center;
    height: calc(var(--icon-size) + 2 * var(--icon-padding));
  }

  @media (min-width: 50em) {
    nav {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      padding: 1.5rem 5rem 1rem 5rem;
      gap: 1rem;
    }

    .menu-header {
      padding: 0;
    }

    .nav-title {
      font-size: var(--text-lg);
    }

    .menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
      flex-direction: row;
      font-size: var(--text-sm);
      border-radius: 999rem;
      border: 0;
      padding: 0.5rem 0.5625rem;
      background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
      box-shadow: var(--shadow-md);
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: "";
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }

    .link {
      padding: 0.5rem 1rem;
      border-radius: 999rem;
      transition:
        color var(--theme-transition),
        background-color var(--theme-transition);
    }

    .link:hover,
    .link:focus {
      color: var(--gray-100);
      background-color: var(--accent-subtle-overlay);
    }

    .link.active {
      color: var(--accent-text-over);
      background-color: var(--accent-regular);
    }

    .menu-footer {
      --icon-padding: 0.375rem;

      justify-self: flex-end;
      align-items: center;
      padding: 0;
      background-color: transparent;
      box-shadow: none;
    }

    .socials {
      display: none;
    }
  }

  @media (min-width: 60em) {
    .socials {
      display: flex;
      justify-content: flex-end;
      gap: 0;
    }
  }
  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }

  .nav-blurred {
    backdrop-filter: blur(3px);
  }

  .name {
    display: flex;
    gap: 2rem;
  }
</style>
